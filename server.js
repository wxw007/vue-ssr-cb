const fs = require('fs')
const path = require('path')
const express = require('express')
const LRU = require('lru-cache')
const favicon = require('serve-favicon')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const publicPath = "/n/dist"
const resourcePath = "." + publicPath;

const isProd = process.env.NODE_ENV === 'production'

const serverInfo = "express";
// const serverInfo =
//   `express/${require('express/package.json').version} `
//   +`vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const config = require('./config')
process.__port__ = isProd ? config.proPort : config.devPort
process.__database_url__ = config.databaseURL

fs.writeFileSync(resolve("nodejs.pid"), process.pid)

const app = express()

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})



app.use("/n/dist/static", serve('./static', true))
app.use(publicPath, serve(resourcePath, true))
app.use(favicon('./favicon.ico'))
// app.use('/service-worker.js', serve('./dist/service-worker.js'))

// app.use('/public', serve('./public', true))
// app.use('/manifest.json', serve('./manifest.json', true))

// 代理请求配置， 部署到正式生产环境需要删除
if (!isProd) {
  const proxyTable = {
    '/s/**': {
      target: config.databaseURL,
      secure: false,
      changeOrigin: true
    },
     '/**.do': {
      target: config.databaseURL,
      secure: false,
      changeOrigin: true
    },
    '/static/**': {
      target: config.databaseURL,
      secure: false,
      changeOrigin: true
    },
    "/image/**": {
      target: config.databaseURL,
      secure: false,
      changeOrigin: true
    }
  };
  Object.keys(proxyTable).forEach(function (context) {
    var options = proxyTable[context]
    if (typeof options === 'string') {
      options = { target: options }
    }
    app.use(require('http-proxy-middleware')(options.filter || context, options))
  })
}

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 1
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve(resourcePath),
    // recommended for performance
    runInNewContext: false,
    shouldPreload (file, type) {
      return false;
    }
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require(resourcePath + '/information-vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require(resourcePath + '/information-vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}


function render (req, res) {
  const s = Date.now()

  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.headers) {
      for (let key in err.headers) {
        if (err.headers[key] != null) {
          res.setHeader(key, err.headers[key])
        }
      }
    }
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else if (err.msg) {
      res.status(500).send(err.msg)
      console.error(`error during render : ${req.url}`);
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const renderToString = (url, status) => {
    const context = {
      title: "", // default title
      meta: "",
      url: url,
      reqHeaders: req.headers,
    }

    renderer.renderToString(context, (err, html) => {
      if (err) {
        return handleError(err)
      }

      res.setHeader("Content-Type", "text/html")

      if (context.resHeaders) {
        for (let key in context.resHeaders) {
          res.setHeader(key, context.resHeaders[key])
        }
      }

      if (status) {
        res.status(status).send(html);
      } else {
        res.send(html);
      }
      if (!isProd) {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
    })
  }

  renderToString(req.url);

}

app.get("/ok", (req, res) => {
  Promise.resolve("ok").then(result => {
    res.send(result);
  })
})
app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

// const port = process.env.PORT || 8080
const port = process.__port__ || 8180
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
